name: CryptoSpins API Tests

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'api/**'
      - '.github/workflows/**'
      - 'monitoring/**'
      - 'argo/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
      - '.github/workflows/**'
      - 'monitoring/**'
      - 'argo/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run linting with flake8
      working-directory: ./api
      run: |
        # Install flake8 for linting
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 for Black compatibility
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run tests with pytest
      working-directory: ./api
      run: |
        python -m pytest --cov=main --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        flags: unittests
        name: cryptospins-api-coverage
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials (if available)
      id: aws-creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
      continue-on-error: true

    - name: Login to Amazon ECR
      id: login-ecr
      if: steps.aws-creds.outcome == 'success'
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image (no push if no AWS creds)
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry || '269599744150.dkr.ecr.us-east-1.amazonaws.com' }}
        ECR_REPOSITORY: cryptospins-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd api
        echo "üî® Building Docker image..."
        docker build --platform linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker build --platform linux/amd64 -t $ECR_REPOSITORY:latest .
        
        if [[ "${{ steps.aws-creds.outcome }}" == "success" ]]; then
          echo "üöÄ Pushing to ECR..."
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "‚úÖ Successfully pushed to ECR"
        else
          echo "‚ö†Ô∏è  AWS credentials not found - skipping ECR push"
          echo "   Add AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to repository secrets"
          echo "   Docker image built successfully: $ECR_REPOSITORY:$IMAGE_TAG"
        fi

    - name: Update deployment image (if pushed to ECR)
      if: steps.aws-creds.outcome == 'success'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cryptospins-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update the deployment YAML with new image tag
        sed -i "s|image: .*/cryptospins-api:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" api/k8s/deployment.yaml
        
        # Commit the updated deployment file
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add api/k8s/deployment.yaml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ci: update CryptoSpins API image to $IMAGE_TAG"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
        fi